@page "/templates"
@using TANA.Domain.Entities
@using TANA.Application.Interface
@using TANA.Infrastructure.Services
@inject TemplateLibraryService TemplateLibraryService
@inject ITemplateRepository TemplateRepo
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject TemplatePdfService PdfService
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Language> L
@rendermode InteractiveServer



<h3>@L["Template"] @L["Library"]</h3>

<button class="btn btn-secondary mb-3" @onclick="ToggleTemplates">
    @(showTemplates ? @L["Hide"] + " " + @L["Templates"] : @L["Show"]+ " " + @L["Templates"])
</button>

<div class="mb-4 p-3 border rounded">
    <h4>@L["Upload"] @L["New"] @L["Template"]</h4>
    <InputFile OnChange="HandleFileSelected" />
    <button class="btn btn-primary mt-2" @onclick="SaveFile" disabled="@( !isFileSelected )">
        @L["Save"] @L["Template"]
    </button>

    @if (!string.IsNullOrEmpty(message))
    {
        <p class="mt-2">@message</p>
    }
</div>


@if (showTemplates && templates != null)
{
    <div class="mt-4">
        <h5>@L["Templates"]:</h5>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>@L["Template"] @L["Name"]</th>
                    <th>@L["CreatedDate"] </th>
                    <th>@L["LastModified"]</th>
                    <th>@L["Actions"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var template in templates)
                {
                    <tr>
                        <td>@template.Id</td>
                        <td>@template.TemplateName</td>
                        <td>@template.CreatedDate</td>
                        <td>@template.LastModifiedDate</td>
                        <td>
                            <button class="btn btn-primary btn-sm me-2"
                                    @onclick="() => ExportToPdf(template.Id)">
                                @L["Export"] PDF
                            </button>

                            <button class="btn btn-success btn-sm me-2"
                                    @onclick="() => EditTemplate(template.Id)">
                                @L["Edit"]"
                            </button>

                            <button class="btn btn-danger btn-sm me-2"
                                    @onclick="() => DeleteTemplate(template.Id)">
                                @L["Delete"]"
                            </button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => ShowPdfPreview(template.Id)">
                                @L["Preview"] PDF
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}



else if (showTemplates && templates != null)
{
    <div class="mt-4">
        <h5>@L["Template"] @L["Details"]</h5>
        @foreach (var template in templates)
        {
            <div class="border p-3 mb-2">
                <h5>@template.TemplateName</h5>
                <p>@L["CreatedDate"]: @template.CreatedDate</p>
                <p>@L["LastModified"]: @template.LastModifiedDate</p>

                @if (template.Items.Any(i => i.Content == "Day Sections"))
                {
                    <h6>@L["DaySections"]</h6>
                    <ul>
                        @foreach (var item in template.Items.Where(i => i.Content == "Day Sections"))
                        {
                            <li>
                                <strong>@L["Title"]:</strong> @item.Title <br />
                                <strong>@L["Activity"]:</strong> @item.Activity <br />
                                <strong>@L["Meals"]:</strong> @item.Meals <br />
                                <strong>@L["Accommodation"]:</strong> @item.Accommodation <br />
                                <strong>@L["Note"]:</strong> @item.Note <br />
                            </li>
                        }
                    </ul>
                }
                @if (!string.IsNullOrEmpty(template.ImageUrl))
                {
                    <div class="mt-2">
                        <img src="@template.ImageUrl" style="max-width: 200px; height: auto; border: 1px solid #ddd;" />
                    </div>
                }
            </div>
        }
    </div>
}


@code {
    private List<TemplateEntity>? templates;
    private IBrowserFile? selectedFile;
    private bool isFileSelected;
    private string? message;
    private bool showTemplates = false;
    private string? previewFile;



    protected override async Task OnInitializedAsync()
    {
        await LoadTemplatesAsync();
    }

    private async Task LoadTemplatesAsync()
    {
        try
        {
            templates = await TemplateRepo.GetAllTemplatesAsync();

            foreach (var template in templates)
            {
                foreach (var item in template.Items)
                {
                    item.Title = item.Title ?? "No Title";
                    item.Activity = item.Activity ?? "No Activity";
                    item.Meals = item.Meals ?? "No Meals";
                    item.Accommodation = item.Accommodation ?? "No Accommodation";
                    item.Note = item.Note ?? "No Note";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading templates: {ex.Message}");
        }
    }



    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null && selectedFile.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
        {
            isFileSelected = true;
            message = $"Selected: {selectedFile.Name}";
        }
        else
        {
            isFileSelected = false;
            message = "Please select a PDF file.";
        }
    }

    private async Task SaveFile()
    {
        if (selectedFile == null) return;

        try
        {
            string sanitizedFileName = selectedFile.Name.Replace(" ", "_");
            string templateName = Path.GetFileNameWithoutExtension(sanitizedFileName);
            string fileName = $"{templateName}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.pdf";

            using var fs = selectedFile.OpenReadStream(10 * 1024 * 1024);
            await TemplateLibraryService.SaveTemplateFileAsync(fs, templateName, fileName);

            var newTemplate = new TemplateEntity
            {
                TemplateName = templateName,
                CreatedDate = DateTime.UtcNow,
                LastModifiedDate = DateTime.UtcNow,
                Items = new List<TemplateItemEntity>()
            };

            await TemplateRepo.SaveTemplateAsync(newTemplate);

            message = "Uploaded & saved to database!";
            isFileSelected = false;
            selectedFile = null;

            await LoadTemplatesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SaveFile: {ex.Message}");
            message = "Error uploading file.";
        }
    }


    private async Task ExportToPdf(int templateId)
    {
        try
        {
            var templateEntity = await TemplateRepo.GetTemplateByIdAsync(templateId);
            if (templateEntity != null)
            {
                byte[] pdfBytes = PdfService.Generate(templateEntity);

                if (pdfBytes.Length == 0)
                {
                    await JS.InvokeVoidAsync("alert", "Error generating the PDF.");
                    return;
                }

                string sanitizedTemplateName = templateEntity.TemplateName.Replace(" ", "_");
                string directoryPath = Path.Combine("wwwroot", "TemplateLibrary", sanitizedTemplateName);

                if (!Directory.Exists(directoryPath))
                    Directory.CreateDirectory(directoryPath);

                string fileName = $"{sanitizedTemplateName}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.pdf";
                string filePath = Path.Combine(directoryPath, fileName);

                await File.WriteAllBytesAsync(filePath, pdfBytes);

                Console.WriteLine($"PDF saved at: {filePath}");

                await JS.InvokeVoidAsync("alert", $"PDF exported successfully at {filePath}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error exporting the template to PDF.");
        }
    }




    private void EditTemplate(int id) =>
        Navigation.NavigateTo($"/template-builder/{id}");


    private async Task DeleteTemplate(int id)
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this template?");
            if (confirmed)
            {
                await TemplateRepo.DeleteTemplateAsync(id);
                templates = templates?.Where(t => t.Id != id).ToList();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting template: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error deleting the template.");
        }
    }


    private async Task ToggleTemplates()
    {
        showTemplates = !showTemplates;

        if (showTemplates)
        {
            await LoadTemplatesAsync();
        }

        StateHasChanged();
    }

    private async Task ShowPdfPreview(int templateId)
    {
        try
        {
            var templateEntity = await TemplateRepo.GetTemplateByIdAsync(templateId);
            if (templateEntity != null)
            {
                byte[] pdfBytes = PdfService.Generate(templateEntity);

                if (pdfBytes.Length > 0)
                {
                    var base64 = Convert.ToBase64String(pdfBytes);
                    var pdfDataUrl = $"data:application/pdf;base64,{base64}";
                    await JS.InvokeVoidAsync("open", pdfDataUrl, "_blank");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "PDF generation failed.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error previewing PDF: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Error showing PDF preview.");
        }
    }




}